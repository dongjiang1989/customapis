// Copyright 2025 The KubeService-Stack Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	applyconfigurationcustomv1 "github.com/dongjiang1989/customapi/pkg/client/applyconfiguration/custom/v1"
	scheme "github.com/dongjiang1989/customapi/pkg/client/clientset/versioned/scheme"
	customv1 "github.com/dongjiang1989/customapis/pkg/apis/custom/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// TestTypesGetter has a method to return a TestTypeInterface.
// A group's client should implement this interface.
type TestTypesGetter interface {
	TestTypes(namespace string) TestTypeInterface
}

// TestTypeInterface has methods to work with TestType resources.
type TestTypeInterface interface {
	Create(ctx context.Context, testType *customv1.TestType, opts metav1.CreateOptions) (*customv1.TestType, error)
	Update(ctx context.Context, testType *customv1.TestType, opts metav1.UpdateOptions) (*customv1.TestType, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*customv1.TestType, error)
	List(ctx context.Context, opts metav1.ListOptions) (*customv1.TestTypeList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *customv1.TestType, err error)
	Apply(ctx context.Context, testType *applyconfigurationcustomv1.TestTypeApplyConfiguration, opts metav1.ApplyOptions) (result *customv1.TestType, err error)
	TestTypeExpansion
}

// testTypes implements TestTypeInterface
type testTypes struct {
	*gentype.ClientWithListAndApply[*customv1.TestType, *customv1.TestTypeList, *applyconfigurationcustomv1.TestTypeApplyConfiguration]
}

// newTestTypes returns a TestTypes
func newTestTypes(c *MyExampleV1Client, namespace string) *testTypes {
	return &testTypes{
		gentype.NewClientWithListAndApply[*customv1.TestType, *customv1.TestTypeList, *applyconfigurationcustomv1.TestTypeApplyConfiguration](
			"testtypes",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *customv1.TestType { return &customv1.TestType{} },
			func() *customv1.TestTypeList { return &customv1.TestTypeList{} },
		),
	}
}
