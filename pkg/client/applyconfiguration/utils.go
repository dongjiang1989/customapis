// Copyright 2025 The KubeService-Stack Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	customv1 "github.com/dongjiang1989/customapi/pkg/client/applyconfiguration/custom/v1"
	internal "github.com/dongjiang1989/customapi/pkg/client/applyconfiguration/internal"
	v1 "github.com/dongjiang1989/customapis/pkg/apis/custom/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=example.test.crd.code-generator.k8s.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("ReplicaSpec"):
		return &customv1.ReplicaSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TestSpec"):
		return &customv1.TestSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TestType"):
		return &customv1.TestTypeApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
