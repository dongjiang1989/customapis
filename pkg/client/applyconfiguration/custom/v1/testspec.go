// Copyright 2025 The KubeService-Stack Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	customv1 "github.com/dongjiang1989/customapis/pkg/apis/custom/v1"
)

// TestSpecApplyConfiguration represents a declarative configuration of the TestSpec type for use
// with apply.
type TestSpecApplyConfiguration struct {
	ReplicaSpecs map[string]*customv1.ReplicaSpec `json:"replicaSpecs,omitempty"`
}

// TestSpecApplyConfiguration constructs a declarative configuration of the TestSpec type for use with
// apply.
func TestSpec() *TestSpecApplyConfiguration {
	return &TestSpecApplyConfiguration{}
}

// WithReplicaSpecs puts the entries into the ReplicaSpecs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ReplicaSpecs field,
// overwriting an existing map entries in ReplicaSpecs field with the same key.
func (b *TestSpecApplyConfiguration) WithReplicaSpecs(entries map[string]*customv1.ReplicaSpec) *TestSpecApplyConfiguration {
	if b.ReplicaSpecs == nil && len(entries) > 0 {
		b.ReplicaSpecs = make(map[string]*customv1.ReplicaSpec, len(entries))
	}
	for k, v := range entries {
		b.ReplicaSpecs[k] = v
	}
	return b
}
